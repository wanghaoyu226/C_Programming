#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//定义棋盘大小
#define BOARD_SIZE 3

//棋盘状态，0表示空位，1表示玩家落子，2表示电脑落子
int board[BOARD_SIZE][BOARD_SIZE];

//初始化棋盘
void initBoard(){
    for(int i=0;i<BOARD_SIZE;i++){
        for(int j=0;j<BOARD_SIZE;j++){
            board[i][j]=0;
        }
    }
}

//展示棋盘
void printBoard(){
    for(int i=0;i<BOARD_SIZE;i++){
        for(int j=0;j<BOARD_SIZE;j++){
            if(board[i][j]==0){
                printf("   ");
            }else if(board[i][j]==1){
                printf(" X ");
            }else{
                printf(" O ");
            }
            if(j<BOARD_SIZE-1){
                printf("|");
            }
        }
        printf("\n");
        if(i<BOARD_SIZE-1){
            printf("-----------\n");
        }
    }
}

//判断是否有空位
int isEmpty(int row,int col){
    return board[row][col]==0;
}

//玩家落子
void playerMove(){
    int row,col;
    do{
        printf("请输入你要落子的行（0 - %d）和列（0 - %d），用空格隔开：",BOARD_SIZE-1,BOARD_SIZE-1);
        scanf("%d %d",&row,&col);
    }while(row<0||row>=BOARD_SIZE||col<0||col>=BOARD_SIZE||!isEmpty(row,col));
    board[row][col]=1;
}

//电脑随机落子（简单的随机策略）
void computerMove(){
    int row,col;
    do{
        row=rand()%BOARD_SIZE;
        col=rand()%BOARD_SIZE;
    }while(!isEmpty(row,col));
    board[row][col]=2;
}

//判断是否某一方胜利
int checkWin(int player){
    //检查行
    for(int i=0;i<BOARD_SIZE;i++){
        int win=1;
        for(int j=0;j<BOARD_SIZE;j++){
            if(board[i][j]!=player){
                win=0;
                break;
            }
        }
        if(win)return 1;
    }
    //检查列
    for(int j=0;j<BOARD_SIZE;j++){
        int win=1;
        for(int i=0;i<BOARD_SIZE;i++){
            if(board[i][j]!=player){
                win=0;
                break;
            }
        }
        if(win)return 1;
    }
    //检查对角线
    int win=1;
    for(int i=0;i<BOARD_SIZE;i++){
        if(board[i][i]!=player){
            win=0;
            break;
        }
    }
    if(win)return 1;
    win=1;
    for(int i=0;i<BOARD_SIZE;i++){
        if(board[i][BOARD_SIZE-1-i]!=player){
            win=0;
            break;
        }
    }
    if(win)return 1;
    return 0;
}

//判断是否平局
int checkDraw(){
    for(int i=0;i<BOARD_SIZE;i++){
        for(int j=0;j<BOARD_SIZE;j++){
            if(board[i][j]==0){
                return 0;
            }
        }
    }
    return 1;
}

int main(){
    srand((unsigned int)time(NULL));
    initBoard();
    printBoard();
    while(1){
        playerMove();
        printBoard();
        if(checkWin(1)){
            printf("恭喜你，你赢了！\n");
            break;
        }
        if(checkDraw()){
            printf("平局！\n");
            break;
        }
        computerMove();
        printBoard();
        if(checkWin(2)){
            printf("很遗憾，电脑赢了！\n");
            break;
        }
        if(checkDraw()){
            printf("平局！\n");
            break;
        }
    }
    return 0;
}
